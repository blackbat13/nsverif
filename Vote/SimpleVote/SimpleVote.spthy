theory VotingProtocol
begin

builtins: multiset, symmetric-encryption


rule H_fresh:
  [ Fr(~x) ]
  --[ H($H), Learn($H,$x.1, ~x) ]->
  [ !HK($H, $x.1, ~x) ]


rule H_send_1:
  [ !HK($H, $x.1, x.2) ]
  --[ Send('Human', $x.1, x.2), H($H) ]->
  [ Out(< $x.1, x.2 >) ]

rule H_receive_1:
  [ In(< $x.1, x.2 >) ]
  --[ Receive('Human', $x.1, x.2 ), Learn($H,$x.1, x.2), H($H) ]->
  [ !HK($H, $x.1, x.2) ]

rule readTable:
  [ In(<'key', t>), !Table(t,s) ]
  --[ Receive('Human','key',t), H($H), Learn($H,'secret',s) ]->
  [ !HK($H,'secret',s) ]


rule H_send_S:
  [ !HK($H, $x.1, x.2) ]
  --[ Send('Human', $x.1, x.2), H($H), To($H) ]->
  [ !Broadcast($H, $x.1, x.2) ]

rule H_receive_S:
  [ !Broadcast($H, $x.1, x.2) ]
  --[ Receive('Human', $x.1, x.2), Learn($H,$x.1, x.2), H($H), From($H), Forbidden() ]->
  [ !HK($H, $x.1, x.2) ]

rule readTable_S:
  [ !Broadcast($H, 'key', t), !Table(t,s) ]
  --[ Receive('Human','key',t), H($H), From($H), Learn($H,'secret',s) ]->
  [ !HK($H,'secret',s) ]

rule SetupGenerateSecret:
 let
    cA = 'candA'
    cB = 'candB'
 in
 [ Fr(~s1A), Fr(~s1B),
   Fr(~s2A), Fr(~s2B),
   Fr(~id1), Fr(~id2),
   Fr(~t1A), Fr(~t1B),
   Fr(~t2A), Fr(~t2B) ]
 --[ OnlyOnce(), Vote1(cA), Vote2(cB),
     Secret(~s1A), Secret(~s1B),
     Secret(~s2A), Secret(~s2B),

     Rule3('Human','ICompare','vote'),
   	 InitK('Human','S',$H),
     Rule4('Human','noTellEx','secret','S') ]->

 [ InitK($H,'vote',cA),
   !HK($H,'vote',cA),

   !Table(~t1A,~s1A), 
   !Table(~t1B,~s1B),
   !Table(~t2A,~s2A), 
   !Table(~t2B,~s2B),

   S1(~id1,cA,~t1A), S1(~id1,cB,~t1B),
   S2(~id2,cA,~t2A), S2(~id2,cB,~t2B),

   Out(senc(<'v1',cA>,~s1A)), Out(senc(<'v1',cB>,~s1B)),
   Out(senc(<'v2',cA>,~s2A)), Out(senc(<'v2',cB>,~s2B)),

   !PublishVote(senc(<'v1',cA>,~s1A)), !PublishVote(senc(<'v1',cB>,~s1B)),
   !PublishVote(senc(<'v2',cA>,~s2A)), !PublishVote(senc(<'v2',cB>,~s2B)),

   SendVote($H,'vote',cB) ]

rule V_Vote1:
  [ InitK($H,'vote',vote) ]
  --[ H_role($H) ]->
  [ !Broadcast($H,'vote',vote) ]

rule outputVote:
  [ !Broadcast($H,'vote',vote1), 
    SendVote($H,'vote',vote2),
    S1(id1,vote1,t1), 
    S2(id2,vote2,t2) ]
  -->
  [ Out(<vote1,id1> + <vote2,id2>),
    Out(<'key',t1>),
    SendKey(t2) ]

rule V_getS1:
  [ In(<'key',t>), !Table(t,s) ]
  --[ H_role($H) ]->
  [ !Broadcast($H,'secret',s) ]

rule V_getS2:
  [ SendKey(t), !Table(t,s) ]
  -->
  [ SendSecret($H,'secret',s) ]

rule verifVote1:
  [ !PublishVote(senc(<i,v>,s)),
    !Broadcast($H,'secret',s) ]
  --[ Verified(sdec(senc(<i,v>,s),s)) ]->
  [  ]

rule verifVote2:
  [ !PublishVote(senc(<i,v>,s)),
    SendSecret($H,'secret',s) ]
  --[ Checked(sdec(senc(<i,v>,s),s)) ]->
  [  ]

#ifdef ruleBased
/* Rule-Based Human Rules */
/*
restriction noTell:
	"All l m #s #i. Rule3('Human','noTell',l) @s & Send('Human',l,m) @i ==> F "
*/
restriction noTellEx:
	"All lR R l m #i #s #s2. Rule4('Human','noTellEx',l,lR)@s & InitK('Human',lR,R) @s2 & Send('Human',l,m) @i ==> To(R) @i"
/*
restriction noGet:	
	"( All l x #s #i. Rule3('Human','noGet',l) @s & Receive('Human',l,x) @i ==> F)"
*/
restriction ICompare:
	" All l y #s #i. Rule3('Human','ICompare',l)@s &  Receive('Human',l,y) @i ==> Ex #j. InitK('Human',l,y) @j"


#endif

restriction onlyOnce:
  " All #i #j. OnlyOnce()@i & OnlyOnce()@j ==> #i = #j"

restriction forbid:  
    "not (Ex #k. Forbidden() @k)" 

lemma Verifiability:
  " All #i v id. Verified(<id,v>)@i ==> (Ex #j. Vote1(v) @j & j < i) "

lemma Checkability:
  " All #i v id. Checked(<id,v>)@i ==> (Ex #j. Vote2(v) @j & j < i) "

lemma Executionability:
  exists-trace
  " Ex #i #j v1 i1 v2 i2. Verified(<v1,i1>)@i & Checked(<v2,i2>)@j "

lemma ballotSecrecy:
  " All s #i. Secret(s) @i ==> not (Ex #j. K(s) @j)"

#ifdef infallible
restriction only_infallible_humans:
  "not (Ex H #k. H(H) @ k)"
#endif

#ifdef untrained
restriction only_fallible_humansU:  
    "not (Ex H #k. H_role(H) @k)"
#endif

#ifdef ruleBased
restriction only_fallible_humansRB:  
    "not (Ex H #k. H_role(H) @k)" 
#endif

end
