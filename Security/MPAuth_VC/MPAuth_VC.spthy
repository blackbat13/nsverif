theory MPAuth_VC
begin


/*
Protocol in Alice&Bob notation:
	#in fact this does not model initial knowledge but knowledge after login-part has already happened
	0. H 		: knows(D,P,S,m,idH,idS)
	0. D 		: knows(H,idH,pk(S),idS,S,rS,rD)
	0. S 		: knows(skS,H,idS,idH,rS,rD)

	9.  H *->*  P	: m
	10. P *->*  S	: m
	11. S *->*  P	: Fr(rS2).senc(<m,rS2>,f(rS,rD)) / transauth
	12. P *->*  D	: transauth / senc(<m,rS2>,f(rS,rD))
	13. D *->*  H	: fresh(vc).vc,m
	14. H *->*  D	: vc
	15. D *->*  P	: senc(f(m,rS2),f(rS,rD)) / forS2
	16. P *->*  S	: forS2 / senc(f(m,rS2),f(rS,rD))
 	
To model a malicious platform P: make all channels to/from P insecure and leave role of P out    
	    
*/

/* built-ins */
builtins: signing, asymmetric-encryption, hashing, symmetric-encryption
functions: f/1, m/1  // f/1 used for function in protocol, m/1 used to give message a type.


/* only allow human agent rules (corresponding to infallible human) */
#ifdef infallible
restriction only_infallible_humans:  
  	"not (Ex #k. H('Human') @k)" 
#endif

/* only allow for untrained human rules (corresponding to fallible human) */
#ifdef ruleBased
restriction only_fallible_humansRB:  
  	"not (Ex H x #k. H_role(H,x) @k)" 
#endif

#ifdef untrained
restriction only_fallible_humansU:  
  	"not (Ex H x #k. H_role(H,x) @k)"
#endif


/* untrained human rules*/ 
// insecure channels
rule H_fresh:
        [ Fr(~x) ]
	--[ Fresh($H,$x.1,~x), !HK($H,$x.1,~x),
		H($H) ]->
	[ !HK($H,$x.1,~x)]

rule H_send: 
	[ !HK($H,$x.1,x.2) ]
	--[ Send('Human',$x.1,x.2),
		H($H) ]->
	[ Out(<$x.1,x.2>)]

rule H_receive: 
	[ In( <$x.1,x.2>) ]
	--[ Receive('Human',$x.1,x.2), !HK($H,$x.1, x.2),
		H($H) ]->
	[ !HK($H,$x.1, x.2) ]

// secure channel
rule H_send_S:
  	[ !HK($H,$x.1,x.2) ]
	--[ Send('Human',$x.1,x.2),
		H($H), To($A)]->
	[ Out_S($H,$A,$x.1,x.2) ]

rule H_receive_S:
	[ In_S( $A,$H, $x.1, x.2 ) ]
	--[ Receive('Human',$x.1,x.2), !HK($H,$x.1,x.2), 
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2) ]

rule H_send_S2: 
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2) ]
	--[ Send('Human',$x.1,x.2), 
  	    Send('Human',$y.1,y.2), 
	    H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1>,<x.2,y.2>) ]


rule H_send_S3:
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2) ]
	--[ Send('Human',$x.1,x.2), 
	    Send('Human',$y.1,y.2),
	    Send('Human',$z.1,z.2), 
	    H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1,$z.1>,<x.2,y.2,z.2>) ]

rule H_send_S4:
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$w.1,w.2) ]
	--[     Send('Human',$x.1,x.2), 
		Send('Human',$y.1,y.2),
		Send('Human',$z.1,z.2), 
		Send('Human',$w.1,w.2), 
		H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1,$z.1,$w.1>,<x.2,y.2,z.2,w.2>) ]


rule H_receive_S2:
	[ In_S( $A,$H, <$x.1,$y.1>, <x.2,y.2> ) ]
	--[ Receive('Human',$x.1,x.2), 
		Receive('Human',$y.1,y.2), !HK($H,$x.1,x.2),!HK($H,$y.1,y.2),
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2),!HK($H,$y.1,y.2) ]


rule H_receive_S4:
	[ In_S( $A,$H, <$x.1,$y.1,$z.1,$v.1>,<x.2,y.2,z.2,v.2> ) ]
	--[     Receive('Human',$x.1,x.2), 
		Receive('Human',$y.1,y.2), 
		Receive('Human',$z.1,z.2), 
		Receive('Human',$v.1,v.2), !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$v.1,v.2),
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$v.1,v.2) ]



/* Channel rules */
rule ChanOut_S:
	[Out_S($A,$B,xn,x)]
	--[ChanOut_S($A,$B,xn,x)]->
	[!Sec($A,$B,xn,x)]

rule ChanIn_S:
	[!Sec($A,$B,xn,x)]
	--[ChanIn_S($A,$B,xn,x)]->
	[In_S($A,$B,xn,x)]

rule ChanOut_C:
	[Out_C($A,$B,xn,x)]
	--[ChanOut_C($A,$B,xn,x)]->
	[!Conf($B,xn,x)]

rule ChanIn_C:
	[!Conf($B,xn,x), In($A)]
	--[ChanIn_C($A,$B,xn,x)]->
	[In_C($A,$B,xn,x)]

rule ChanIn_CAdv:
	[In(<$A,$B,xn,x>)]
	--[]->
	[In_C($A,$B,xn,x)]

rule ChanOut_A:
	[Out_A($A,$B,xn,x)]
	--[ChanOut_A($A,$B,xn,x)]->
	[!Auth($A,xn,x), Out(<$A,$B,xn,x>)]

rule ChanIn_A:
	[!Auth($A,xn,x), In($B)]
	--[ChanIn_A($A,$B,xn,x)]->
	[In_A($A,$B,xn,x)]



	   
/* setup */

rule publickeyinfrastructure:
	[Fr(~skX)]
	--[LontermKey($X,~skX)]->
	[!Ltk($X, ~skX),!Pk($X, pk(~skX)), Out(pk(~skX)) ]

rule SetupAfterEA: 
  	[ !Ltk($S, ~skS), Fr(~m), Fr(~rS), Fr(~rD)] 
  	--[ Setup($H), Roles($H,$D,$P,$S), Device($H,$D)
		, InitK($H,'D',$D), InitK($H,'P',$P), InitK($H,'S',$S), InitK($H,'m',m(~m)), InitK($H,'idH',$idH), InitK($H,'idS',$idS)	
		, Rule3($H,'ICompare','m') 
	]-> 
  	[ AgSt_D7($D,'D_7',< $H, $idH, pk(~skS), $idS, $S, ~rS, ~rD >)
	, AgSt_S8($S,'S_8',< ~skS, $H, $idS, $idH, ~rS, ~rD >)
	                  
	, !HK($H,'D',$D), !HK($H,'P',$P), !HK($H,'S',$S), !HK($H,'m',m(~m)), !HK($H,'idH',$idH), !HK($H,'idS',$idS)	
	, AgSt_H6($H,'H_6',< $D, $P, $S, m(~m), $idH, $idS >)
  	
	]

/* agent rules */
rule D_12: 
	[ AgSt_D7($D,'D_7',< $H, $idH, pk(~skS), $idS, $S, ~rS, ~rD >),	In( senc(<m(~m),~rS2>,f(~rS,~rD)) ), Fr(~vc)]
 	--[ D($D) ]->
	[ AgSt_D13($D,'D_13',< $H, $idH, pk(~skS), $idS, $S, ~rS, ~rD, m(~m), ~rS2, ~vc >), Out_S($D,$H,<'vc','m'>,<~vc,m(~m)>) ]
rule D_14: 
	[ AgSt_D13($D,'D_13',< $H, $idH, pk(~skS), $idS, $S, ~rS, ~rD, m(~m), ~rS2, ~vc >), In_S($H,$D,'vc',~vc) ]
 	--[ Dfin() ]->
	[  Out( senc( f(m(~m),~rS2), f(~rS,~rD)) ) ]
		
 rule S_10:
	[ AgSt_S8($S,'S_8',< ~skS, $H, $idS, $idH, ~rS, ~rD >), In(m(~m)), Fr(~rS2) ]
	--[ ]->
	[ AgSt_S11($S,'S_11',< ~skS, $H, $idS, $idH, ~rS, ~rD, m(~m), ~rS2 >), Out( senc(<m(~m),~rS2>,f(~rS,~rD)) ) ]
rule S_16:
	[ AgSt_S11($S,'S_11',< ~skS, $H, $idS, $idH, ~rS, ~rD, m(~m), ~rS2 >), In( senc( f(m(~m),~rS2), f(~rS,~rD)) )]
	--[ Commit($S,$H,m(~m)) ]->
	[ ]

/* human agent rules */
rule H_9:
	[ AgSt_H6($H,'H_6',< $D, $P, $S, m(~m), $idH, $idS >)  ]
	--[H_role($H,'1'), Send($H,'m',m(~m)) ]->
	[ AgSt_H9($H,'H_9',< $D, $P, $S, m(~m), $idH, $idS >), Out(<'m',m(~m)>) ]
rule H_13:           
	[ AgSt_H9($H,'H_9',< $D, $P, $S, m(~m), $idH, $idS >), In_S($D,$H,<'vc','m'>,<~vc,m(~m)>) ]
	--[H_role($H,'5'), Receive($H,'vc',~vc), Receive($H,'m',m(~m)), Send($H,'vc',~vc), To($D) ]->
	[ Out_S($H,$D,'vc',~vc) ]


#ifdef ruleBased
/* Rule-Based Human Rules */

restriction noTell:
	"All l m #s #i. Rule3('Human','noTell',l) @s & Send('Human',l,m) @i ==> F "
/*
restriction noTellEx:
	"All lR R l m #i #s #s2. Rule4('Human','noTellEx',l,lR)@s & InitK('Human',lR,R) @s2 & Send('Human',l,m) @i ==> To(R) @i"
*/
restriction noGet:	
	"( All l x #s #i. Rule3('Human','noGet',l) @s & Receive('Human',l,x) @i ==> F)"

restriction ICompare:
	" All l y #s #i. Rule3('Human','ICompare',l)@s &  Receive('Human',l,y) @i ==> Ex #j. InitK('Human',l,y) @j"


#endif

/* axioms assumptions */

/* Every Human starts in the initial state */
restriction setup_for_IK:
	"All H #i. H(H) @i ==> Ex #j. Setup(H) @j & j<i"

/* No secure channels between humans exist. Humans
   must communicate over incecure channels.         
   This assumption is necessary to remove unsolved chains
   in the protocol model. It is not a strong restriction
   because the protocols do not rely on human to human 
   for security. */
restriction not_Chan_S_human_to_human:
	"All A B mn m #i #j #k.
		ChanOut_S(A,B,mn,m) @i & H(A) @j & H(B) @k ==> F"

/* Assumption: Two distinct roles are not executed by the same agent */
restriction notSameRole:
	"All H1 H2 D1 D2 P1 P2 S1 S2 #i #j. Roles(H1,D1,P1,S1) @i & Roles(H2,D2,P2,S2) @j ==>
		  not H1 = D1
		& not H1 = D2
		& not H1 = P1
		& not H1 = P2
		& not H1 = S1
		& not H1 = S2
		& not D1 = P1
		& not D1 = P2
		& not D1 = S1
		& not D1 = S2
		& not P1 = S1
		& not P1 = S2
	"
/* Assumption: Two humans do not share a single device */
restriction Device:
	"All H1 H2 D #i #j. Device(H1,D) @i & Device (H2,D) @j ==> H1=H2 "




#ifdef untrained
/* Additional assumptions only used to find attack trace (not for proofs) */

restriction OnlyOneDevice: // one Human only has one device
	"All H D2 D1 #i #j. Device(H,D1) @i & Device(H,D2) @j ==> D1=D2 "

#endif


/* lemmas claims */

/* Functionality Lemma */

lemma functional: exists-trace
	"(All H1 H2 #i #j. Setup(H1) @i & Setup(H2) @j ==> #i = #j) 
	& (Ex #k #n S m 
		.
		Dfin() @k
		& Commit(S,'Human',m) @n
		
		)"

/* Message Authentication */

lemma message_authentication:
	"All S m #k. Commit(S,'Human',m) @k ==> 
		(Ex mn #i. Send('Human',mn,m) @i & i < k)" 







end

 
